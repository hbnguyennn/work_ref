from :
+---------------------------------------+
| ipsec_esp | -         | b2b           |
| std_psp   | enc_only  | -             |
|           | dec_only  |               |
+---------------------------------------+


write python function to convert table below to list
table = [
    ["ipsec_esp", "-", "b2b"],
    ["std_psp", "enc_only", "-"],
    ["", "dec_only", ""]
]

to : with have order
ipsec_esp
ipsec_esp.b2b
ipsec_esp.enc_only
ipsec_esp.enc_only.b2b
ipsec_esp.dec_only
ipsec_esp.dec_only.b2b
std_psp
std_psp.b2b
std_psp.enc_only
std_psp.enc_only.b2b
std_psp.dec_only
std_psp.dec_only.b2b

# Define the table structure
table = [
    ["ipsec_esp", "-", "b2b"],
    ["std_psp", "enc_only", "-"],
    ["", "dec_only", ""],
    ["new_protocol", "mode1", "b2b"],
    ["", "mode2", "-"],
    ["", "mode3", ""]
]

# Store the result
result = []

# Extract all unique main keys
main_keys = []
for row in table:
    if row[0] and row[0] not in main_keys:
        main_keys.append(row[0])

# Process each main key
for main_key in main_keys:
    # Add the main key itself
    result.append(main_key)

    # Get all rows related to the main key
    related_rows = [row for row in table if row[0] == main_key or (not row[0] and main_key in result)]

    # Collect all possible subcategories and b2b variants
    subcategories = set()
    b2b_present = False

    for row in related_rows:
        for idx, item in enumerate(row[1:], start=1):
            if item not in ["", "-"]:
                subcategories.add(item)
            if item == "b2b":
                b2b_present = True

    # Sort subcategories for consistent ordering
    subcategories = sorted(list(subcategories))

    # Generate combinations
    for sub in subcategories:
        result.append(f"{main_key}.{sub}")

        # If b2b is present, add the b2b variant
        if b2b_present:
            result.append(f"{main_key}.{sub}.b2b")

    # Add the b2b variant for the main key itself
    if b2b_present:
        result.append(f"{main_key}.b2b")

# Display the result
for item in result:
    print(item)


def convert_table_to_list(table):
    # Initialize an empty list to store the results
    result = []

    # Helper function to create combinations
    def create_combinations(prefix, row_index):
        if row_index >= len(table):
            return
        for col_index in range(len(table[row_index])):
            item = table[row_index][col_index]
            if item and item != "-":  # Ignore empty and hyphen items
                new_combination = f"{prefix}.{item}" if prefix else item
                result.append(new_combination)
                create_combinations(new_combination, row_index + 1)

    # Start creating combinations from the first row
    for item in table[0]:
        if item and item != "-":
            result.append(item)
            create_combinations(item, 1)

    return result


table = [['ipsec_esp', '-', '-', '-'],
         ['', 'enc_only', 'b2b', 'omg'],
         ['psp_std', 'dec_only', '', ''],
         ['', 'mix', '', ''],
         ['', 'abcd', '', '']]

expecting_list = [
                  'ipsec_esp',
                  'ipsec_esp.omg',
                  'ipsec_esp.b2b',
                  'ipsec_esp.b2b.omg',
                  'ipsec_esp.enc_only',
                  'ipsec_esp.enc_only.omg',
                  'ipsec_esp.enc_only.b2b',
                  'ipsec_esp.enc_only.b2b.omg',
                  'ipsec_esp.dec_only',
                  'ipsec_esp.dec_only.omg',
                  'ipsec_esp.dec_only.b2b',
                  'ipsec_esp.dec_only.b2b.omg',
                  'ipsec_esp.mix',
                  'ipsec_esp.mix.omg',
                  'ipsec_esp.mix.b2b',
                  'ipsec_esp.mix.b2b.omg',
                  'ipsec_esp.abcd',
                  'ipsec_esp.abcd.omg',
                  'ipsec_esp.abcd.b2b',
                  'ipsec_esp.abcd.b2b.omg',
                  'psp_std',
                  'psp_std.omg',
                  'psp_std.b2b',
                  'psp_std.b2b.omg',
                  'psp_std.enc_only',
                  'psp_std.enc_only.omg',
                  'psp_std.enc_only.b2b',
                  'psp_std.enc_only.b2b.omg',
                  'psp_std.dec_only',
                  'psp_std.dec_only.omg',
                  'psp_std.dec_only.b2b',
                  'psp_std.dec_only.b2b.omg',
                  'psp_std.mix',
                  'psp_std.mix.omg',
                  'psp_std.mix.b2b',
                  'psp_std.mix.b2b.omg',
                  'psp_std.abcd',
                  'psp_std.abcd.omg',
                  'psp_std.abcd.b2b',
                  'psp_std.abcd.b2b.omg'
                 ]